;(define (reversenum num)
;  (define (iter i result num)
;    (cond ((= num 0) result)
;          ((< num 10) num)
;          (else (iter (+ i 1) (+ result (* (remainder num 10) (expt 10 i))) (quotient num 10)))
;          )
;    )
;  (iter 1 0 num)
;  )

;(define (reversenum num)
;   (define (iter result num)
;       (cond ((= num 0) result)
;             (else (iter (+ (* result 10) (- num (* 10 (quotient num 10)))) (quotient num 10)))
;       )
;   )
;  (iter 0 num)
;)
;
;(define (palindrome? num)
;  (= (reversenum num) num)
;)

(define (num_length x counter)
  (if (= (remainder x (expt 10 counter)) x) counter
     (num_length x (+ counter 1))
  )
)
(define (palindrome? x)
  (define x_length (num_length x 0))
  (define (palindromecheck x counter)
    (cond((not(= (floor(/ x (expt 10 (- x_length counter)))) (remainder x (expt 10 counter)))) #f)
         ((= counter (floor(/ x_length 2))) #t)
         (else (palindromecheck x (+ counter 1)))
    )
  )(palindromecheck x 1)
)

