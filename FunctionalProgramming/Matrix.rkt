(define matrix (list (list 1 2 3 4)(list 5 6 7 8)(list 1 2 3 4)(list 5 6 7 8)))
(define (f x)
  (+ x 2)
)
(define (g x)
  (+ x 1)
)

;destructively traverses a list and changes elements on even position
(define (map_even! f L)
  (define (helper iter list)
    (cond((null? list) list)
         ((even? iter) (begin (set-car! list (f (car list)))
                              (helper (+ 1 iter) (cdr list))))
         (else (helper (+ 1 iter) (cdr list)))
    )
  )(helper 0 L)
)

;destructively traverses a list and changes elements on odd position
(define (map_odd! g L)
  (define (helper iter list)
    (cond((null? list) list)
         ((odd? iter) (begin (set-car! list (g (car list)))
                             (helper (+ 1 iter) (cdr list))))
         (else (helper (+ 1 iter) (cdr list)))
    )
  )(helper 0 L)
)

;traverses the matrix by rows, while on every (even/odd)
;row uses the map function
(define (map_matrix! f g A)
  (define (helper iter M)
    (cond((null? M) M)
         ((odd? iter) (begin (map_odd! g (car M))
                             (helper (+ iter 1) (cdr M))))
         ((even? iter) (begin (map_even! f (car M))
                              (helper (+ iter 1) (cdr M))))
         (else (helper (+ iter 1) (cdr M)))
    )
  )(helper 0 A)
)